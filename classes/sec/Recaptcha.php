<?php
namespace HHK\sec;

use HHK\Exception\RuntimeException;

/**
 * Recaptcha.php
 *
 * @author    Will Ireland <wireland@nonprofitsoftwarecorp.org>
 * @copyright 2010-2021 <nonprofitsoftwarecorp.org>
 * @license   MIT
 * @link      https://github.com/NPSC/HHK
 */

/**
 * Description of Recaptcha
 *
 * This class handles the Google Recaptcha verification process.
 *
 * @author Will
 */
class Recaptcha {
    
    protected $apiKey;
    protected $projectID;
    protected $siteKey;
    
    
    /**
     * Get Google API Keys
     */
    public function __construct(){
        $uS = Session::getInstance();
        
        $this->apiKey = $uS->recaptchaApiKey; //"AIzaSyDwMdFwC4mKidWXykt5b8LSAWjIADqraCc";
        $this->projectID = $uS->googleProjectID; //"helical-clock-316420";
        $this->siteKey = $uS->recaptchaSiteKey; //"6LemLyQbAAAAAKKaz91-FZCSI8cRs-l9DCYmEadO";
    }
    
    /**
     *
     * Verify a token generated by Google Recaptcha
     *
     * @param string $token Token generated by Google Recaptcha JS
     * @param string $acceptedscore Any score at or above this level will be considered a valid submission, valid values are 0.1 - 1.0
     * @param string $action The user action being performed, the default action is "submit". This action must match the action defined when the token was created
     *
     * @return boolean
     */
    public function verify(string $token, $acceptedscore = '0.5', string $action = 'submit'){
        
        $uS = Session::getInstance();
        
        $apiKey = $uS->recaptchaApiKey; //"AIzaSyDwMdFwC4mKidWXykt5b8LSAWjIADqraCc";
        $projectID = $uS->googleProjectID; //"helical-clock-316420";
        $siteKey = $uS->recaptchaSiteKey; //"6LemLyQbAAAAAKKaz91-FZCSI8cRs-l9DCYmEadO";
        
        
        try{
            
            $ch = curl_init();
            
            $data = [
                "event"=>[
                    "token"=>$token,
                    "siteKey"=>$siteKey,
                    "expectedAction"=>$action
                ]
            ];
            
            curl_setopt($ch, CURLOPT_URL,"https://recaptchaenterprise.googleapis.com/v1beta1/projects/" . $projectID . "/assessments?key=" . $apiKey);
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
            
            // Receive server response ...
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            
            $server_output = curl_exec($ch);
            
            curl_close ($ch);
        
        
            $response = json_decode($server_output);
            
            //return $response;
            
            if($response->tokenProperties->valid && $response->tokenProperties->action == 'submit' && $response->score >= $acceptedscore){
                return $response->score;
            }else{
                return false;
            }
        }catch(\Exception $e){
            throw new RuntimeException("Could not verify recaptcha: " . $e->getMessage());
        }
        
    }
    
    public function getScriptTag(){
        return '<script src="https://www.google.com/recaptcha/api.js?render=' . $this->siteKey . '"></script>';
    }
    
    public function getSiteKey(){
        return $this->siteKey;
    }
    
}

?>