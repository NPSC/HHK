<?php
namespace HHK\sec;

use HHK\Exception\RuntimeException;
use GuzzleHttp\Client;

/**
 * Recaptcha.php
 *
 * @author    Will Ireland <wireland@nonprofitsoftwarecorp.org>
 * @copyright 2010-2021 <nonprofitsoftwarecorp.org>
 * @license   MIT
 * @link      https://github.com/NPSC/HHK
 */

/**
 * Description of Recaptcha
 *
 * This class handles the Google Recaptcha verification process.
 *
 * @author Will
 */
class Recaptcha {

    protected $apiKey;
    protected $projectID;
    protected $siteKey;


    /**
     * Get Google API Keys
     */
    public function __construct(){
        $uS = Session::getInstance();

        $this->apiKey = decryptMessage($uS->recaptchaApiKey);
        $this->projectID = $uS->googleProjectID;
        $this->siteKey = $uS->recaptchaSiteKey;
    }

    /**
     *
     * Verify a token generated by Google Recaptcha
     *
     * @param string $token Token generated by Google Recaptcha JS
     * @param string $acceptedscore Any score at or above this level will be considered a valid submission, valid values are 0.1 - 1.0
     * @param string $action The user action being performed, the default action is "submit". This action must match the action defined when the token was created
     *
     * @return boolean
     */
    public function verify(string $token, $acceptedscore = '0.5', string $action = 'submit'){

        try{
            $data = [
                "event"=>[
                    "token"=>$token,
                    "siteKey"=>$this->siteKey,
                    "expectedAction"=>$action
                ]
            ];

            $client = new Client();

            $response = $client->post("https://recaptchaenterprise.googleapis.com/v1/projects/" . $this->projectID . "/assessments?key=" . $this->apiKey, [
                    'json'=>$data
                ]);

            $body = json_decode($response->getBody());

            if($body->tokenProperties->valid && $body->tokenProperties->action == 'submit'){
                return $body->riskAnalysis->score;
            }else{
                return false;
            }
        }catch(\Exception $e){
            throw new RuntimeException("Could not verify recaptcha: " . $e->getMessage());
        }

    }

    public function getScriptTag(){
        return '<script src="https://www.google.com/recaptcha/api.js?render=' . $this->siteKey . '"></script>';
    }

    public function getSiteKey(){
        return $this->siteKey;
    }

}

?>